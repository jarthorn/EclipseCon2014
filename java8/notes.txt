My Perspective
	- Designed APIs for various parts of Eclipse
	- JFace, Team, Workspace, Jobs, Equinox, p2, e4, etc
	- Was the manual implementation of API Tools before we automated it
	- Believe APIs are 

Talk Goals
	- Not an introduction to Java 8 features
	- Look at Java 8 features from API designer perspective
	- How to add them to existing libraries in a compatible way
	- Use when designing new APIs
	
Some Background
	- APIs are interfaces with well specified and supported behavior
	- Limit inter-component coupling
	- Allow implementations to change without ripple effect
	- A cover story to save you from having to tell the truth
	
API Prime Directives
	- Binary compatibility: clients must continue to work without recompiling
	- Contract compatibility: can weaken preconditions, strengthen postconditions
	- Source compatibility: not required, but make reasonable efforts
	- Environment compatibility: avoid increasing restrictions on runtime environment

API Designer's Guide to Java Releases:
	1. Ensure you run as expected on new version
	2. Wait 5 years
	3. Consider adopting new language features

So Why Care About Java 8?
	- Your clients may be using Java 8 right away
	- Key Java 8 features are in method bodies, not API
	- Finally some new tools for API designers
	- Java 8 designed with compatibility in mind

Static methods in interfaces
	- Handy for convenience methods
	- Binary compatible to add
	- Require dependency on Java 8
	- Conversion between static and default not compatible

Default Methods
	Interfaces can now provide method bodies
	Ideal for evolving existing interfaces implemented by clients
	Somewhat limited: only public, no access to state
	
Compatibility of Default Methods
	- binary compatible to convert to default
	- adding new default method: binary compatible, may break contract compatibility
	- existing binaries will not see new default method overriding supertype
	- introducing ambiguous inheritance creates source incompatibility

Interfaces vs Abstract Classes
	- Interfaces:
		- clean separation between API and implementation
		- multiple inheritance, doesn't lock client into your class hierarchy
		- can completely swap implementations
	- Abstract classes:
		- Can evolve without breaking subclasses
		- Provide function that accesses/manipulates state
		- Private state and function

Interface Evolution
	- Can't change an interface without breaking implementations
	- Extend anti-pattern (IPerspectiveListener4, ITextViewerExtension8)
	Solution: specify when interfaces should not be implemented by clients
	Use abstract classes in cases where client extension is needed (IMoveDeleteHook -> TeamHook)
	
Interfaces With Default Methods
	Abstract classes still much more powerful and flexible
	Use on functional interfaces to maintain SAM restriction
	Not needed for interfaces not implemented by clients
	Main usage for evolving existing interfaces

Lambdas
	Appear in API as interfaces with exactly one abstract method (SAM)
	@FunctionalInterface is optional
	Not just syntactic sugar: more efficient implementation
	Encourages functional programming style

Eclipse API examples:
	Job
	IContextFunction
	IAdaptable
	IResourceVisitor
	Many SWT events
	
Functional Example: Alias Visitor

APIs Requiring Java 8
	Use class library function types where possible (java.util.function)
	Use default methods as needed to ensure one abstract method

Streams
	Represent a pipeline on which a series of functions operate
	Infinite, lazy
	Don't modify underlying source
	Consider providing stream-oriented view of your data structures

Method References
	- Can provide API methods with lambda implementations without overhead of added types
	- Can be done without Java 8 dependency

Type Annotations
	- Can now annotate type references
	- Not directly applicable to API because references are not API
	- Possibility of introducing new annotation types applicable to references
	- Most common use is static analysis tools
	- Use @Target to restrict usage
	
Other Annotation Changes
	- Repeating annotations @Repeatable
	- can add "this" as first formal method parameter
	

	
Key Impressions
	- New Java 8 features are easy to introduce
	- Finally some tools to help evolve APIs
	- Can start making your APIs Java 8 friendly without requiring Java 8
	- Making effective use of Lambdas requires major mental shift for Java developers
	- Oracle's Java 8 documentation rocks, always look there first
	